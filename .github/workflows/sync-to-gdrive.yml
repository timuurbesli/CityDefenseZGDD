name: Convert MD to DOCX and Sync to Google Drive

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.md'
      - '!README.md'
      - '!setup-gdrive.md'
      - '!gdd-template-guide.md'
      - '!template-content.md'
  workflow_dispatch:

jobs:
  convert-and-sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Pandoc
      run: |
        wget https://github.com/jgm/pandoc/releases/download/3.1.9/pandoc-3.1.9-1-amd64.deb
        sudo dpkg -i pandoc-3.1.9-1-amd64.deb

    - name: Install dependencies
      run: |
        cat > package.json << 'EOF'
        {
          "name": "city-defense-z-gdd",
          "version": "1.0.0",
          "description": "Game Design Document automation for City Defense Z",
          "main": "upload-to-gdrive.js",
          "dependencies": {
            "googleapis": "^128.0.0"
          }
        }
        EOF
        npm install

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Get changed Markdown files
      id: changed-files
      uses: tj-actions/changed-files@v41
      with:
        files: |
          **.md
        files_ignore: |
          README.md
          setup-gdrive.md
          gdd-template-guide.md
          template-content.md

    - name: Process changed Markdown files
      id: process-changed-files
      run: |
        echo "Detected changed .md files: ${{ steps.changed-files.outputs.all_changed_files }}"

        if [ "${{ steps.changed-files.outputs.any_changed }}" = "false" ]; then
          echo "No .md files changed - skipping conversion."
          echo "CHANGED_MD_FILES=" >> $GITHUB_ENV
        else
          changed_files=""
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            case "$file" in
              *README.md|*setup-gdrive.md|*gdd-template-guide.md|*template-content.md)
                echo "Skipping excluded file: $file"
                ;;
              *)
                changed_files="$changed_files $file"
                ;;
            esac
          done
          
          changed_files=$(echo "$changed_files" | xargs)
          echo "Final list of changed .md files: $changed_files"

          echo "CHANGED_MD_FILES=$changed_files" >> $GITHUB_ENV
          echo "changed_files=$changed_files" >> $GITHUB_OUTPUT
        fi

    - name: Convert Markdown to DOCX
      run: |
        if [ -z "$CHANGED_MD_FILES" ]; then
          echo "No .md files to convert."
          echo "CONVERTED_FILES=" >> $GITHUB_ENV
        else
          converted_files=""
          for file in $CHANGED_MD_FILES; do
            filename=$(basename "$file" .md)
            output_file="${filename}.docx"
            echo "Converting $file to $output_file..."
            pandoc "$file" \
              --from markdown \
              --to docx \
              --output "$output_file" \
              --toc \
              --toc-depth=3 \
              --highlight-style=pygments
            if [ -f "$output_file" ]; then
              converted_files="$converted_files $output_file"
              echo "✅ Converted: $output_file"
            else
              echo "❌ Failed to convert: $file"
            fi
          done

          converted_files=$(echo "$converted_files" | xargs)
          echo "CONVERTED_FILES=$converted_files" >> $GITHUB_ENV
        fi

    - name: Create upload script
      run: |
        cat > upload-to-gdrive.js << 'EOF'
        const { google } = require('googleapis');
        const fs = require('fs');

        async function uploadToGoogleDrive() {
          try {
            const folderId = process.env.GOOGLE_DRIVE_FOLDER_ID;
            if (!folderId) {
              console.error('💥 ERROR: GOOGLE_DRIVE_FOLDER_ID is not set!');
              process.exit(1);
            }
            console.log('📌 Using Google Drive Folder ID:', folderId);

            const auth = new google.auth.GoogleAuth({
              scopes: ['https://www.googleapis.com/auth/drive.file']
            });
            const drive = google.drive({ version: 'v3', auth });

            // Verify folder access before proceeding
            console.log('🔍 Verifying folder access...');
            try {
              const folderInfo = await drive.files.get({
                fileId: folderId,
                fields: 'id, name, mimeType'
              });
              console.log('✅ Folder accessible:', folderInfo.data.name);
            } catch (error) {
              console.error('❌ Cannot access folder:', error.message);
              console.error('🛠️  Please ensure the service account has access to the folder');
              console.error('📧 Service account should be shared with:', process.env.GOOGLE_SERVICE_ACCOUNT || 'service account email');
              process.exit(1);
            }

            const convertedFiles = (process.env.CONVERTED_FILES || '')
              .trim()
              .split(/\s+/)
              .filter(f => f.length > 0);

            if (convertedFiles.length === 0) {
              console.log('⚠️  No converted files to upload. Exiting.');
              return;
            }

            const uploadResults = [];

            for (const fileName of convertedFiles) {
              if (!fs.existsSync(fileName)) {
                console.warn(`⚠️  File not found locally: ${fileName}`);
                uploadResults.push({ fileName, status: 'not_found' });
                continue;
              }

              try {
                console.log(`🔍 Checking for existing file: ${fileName}`);
                const existing = await drive.files.list({
                  q: `name='${fileName}' and '${folderId}' in parents and trashed=false`,
                  fields: 'files(id, name)'
                });

                const fileMetadata = {
                  name: fileName,
                  parents: [folderId]
                };

                const media = {
                  mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                  body: fs.createReadStream(fileName)
                };

                let result;
                if (existing.data.files.length > 0) {
                  const fileId = existing.data.files[0].id;
                  console.log(`📝 Updating existing file: ${fileName} (ID: ${fileId})`);
                  result = await drive.files.update({
                    fileId,
                    media,
                    fields: 'id, name, modifiedTime'
                  });
                  console.log(`✅ Updated: ${fileName}`);
                } else {
                  console.log(`📄 Creating new file: ${fileName}`);
                  result = await drive.files.create({
                    resource: fileMetadata,
                    media,
                    fields: 'id, name, webViewLink'
                  });
                  console.log(`✅ Created: ${fileName}`);
                  console.log(`🔗 Link: ${result.data.webViewLink}`);
                }

                uploadResults.push({
                  fileName,
                  fileId: result.data.id,
                  status: 'success'
                });

              } catch (error) {
                console.error(`❌ Error uploading ${fileName}:`, error.message);
                console.error('Error details:', error);
                uploadResults.push({
                  fileName,
                  status: 'error',
                  error: error.message
                });
              }
            }

            const timestamp = new Date().toISOString();
            const summary = {
              timestamp,
              convertedFiles,
              results: uploadResults,
              status: 'completed'
            };

            console.log('📊 Upload Summary:', JSON.stringify(summary, null, 2));

            const summaryMetadata = {
              name: `GDD_Sync_Report_${timestamp.split('T')[0]}.json`,
              parents: [folderId]
            };

            const summaryMedia = {
              mimeType: 'application/json',
              body: Buffer.from(JSON.stringify(summary, null, 2))
            };

            console.log('📄 Uploading summary report...');
            try {
              const summaryResult = await drive.files.create({
                resource: summaryMetadata,
                media: summaryMedia,
                fields: 'id, name, webViewLink'
              });
              console.log('✅ Summary report uploaded!');
              console.log('🔗 Summary link:', summaryResult.data.webViewLink);
            } catch (error) {
              console.error('❌ Error uploading summary report:', error.message);
            }
            console.log('🎉 All files processed successfully!');

          } catch (error) {
            console.error('💥 Fatal error:', error.message);
            console.error('Full error details:', error);
            process.exit(1);
          }
        }

        process.on('unhandledRejection', (reason) => {
          console.error('💥 Unhandled Rejection:', reason);
          process.exit(1);
        });

        uploadToGoogleDrive();
        EOF

    - name: Upload to Google Drive
      run: node upload-to-gdrive.js
      env:
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
        GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
