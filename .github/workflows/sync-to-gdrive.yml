name: Convert MD to DOCX and Sync to Google Drive

permissions:
  id-token: write
  contents: read

on:
  push:
    branches: [ main, master ]
    paths:
      - '**.md'
      - '!README.md'
      - '!setup-gdrive.md'
      - '!gdd-template-guide.md'
      - '!template-content.md'
  workflow_dispatch:

jobs:
  convert-and-sync:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Pandoc
      run: |
        wget https://github.com/jgm/pandoc/releases/download/3.1.9/pandoc-3.1.9-1-amd64.deb
        sudo dpkg -i pandoc-3.1.9-1-amd64.deb

    - name: Install dependencies
      run: |
        cat > package.json << 'EOF'
        {
          "name": "city-defense-z-gdd",
          "version": "1.0.0",
          "description": "Game Design Document automation for City Defense Z",
          "main": "upload-to-gdrive.js",
          "dependencies": {
            "googleapis": "^128.0.0"
          }
        }
        EOF
        npm install

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
        service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

    - name: Find all Markdown files to convert
      id: find-md
      run: |
        echo "Finding all .md files except excluded ones..."
        md_files=$(find . -type f -name "*.md" ! -name "README.md" ! -name "setup-gdrive.md" ! -name "gdd-template-guide.md" ! -name "template-content.md")
        echo "Found Markdown files:"
        echo "$md_files"
        
        converted_files=""
        for md in $md_files; do
          base=$(basename "$md" .md)
          converted_files="$converted_files ${base}.docx"
        done

        echo "CONVERTED_FILES=$converted_files" >> $GITHUB_ENV
        echo "Converted DOCX files will be:"
        echo "$converted_files"

    - name: Convert all Markdown files to DOCX
      run: |
        for md in $(find . -type f -name "*.md" ! -name "README.md" ! -name "setup-gdrive.md" ! -name "gdd-template-guide.md" ! -name "template-content.md"); do
          base=$(basename "$md" .md)
          out="${base}.docx"
          echo "Converting $md to $out..."
          pandoc "$md" --from markdown --to docx --output "$out" --toc --toc-depth=3
        done

    - name: Create upload script
      run: |
        cat > upload-to-gdrive.js << 'EOF'
        const { google } = require('googleapis');
        const fs = require('fs');

        async function uploadToGoogleDrive() {
          try {
            const folderId = process.env.GOOGLE_DRIVE_FOLDER_ID;
            if (!folderId) {
              console.error('💥 ERROR: GOOGLE_DRIVE_FOLDER_ID is not set!');
              process.exit(1);
            }
            console.log('📌 Using Google Drive Folder ID:', folderId);

            const auth = new google.auth.GoogleAuth({
              scopes: ['https://www.googleapis.com/auth/drive.file']
            });
            const drive = google.drive({ version: 'v3', auth });

            const convertedFiles = (process.env.CONVERTED_FILES || '')
              .trim()
              .split(' ')
              .filter(f => f.length > 0);

            console.log('🚀 Starting Google Drive upload process...');
            console.log('Converted files:', convertedFiles);

            if (convertedFiles.length === 0) {
              console.log('⚠️  No converted files to upload. Exiting.');
              return;
            }

            const uploadResults = [];

            for (const fileName of convertedFiles) {
              if (!fs.existsSync(fileName)) {
                console.log(`⚠️  File not found locally: ${fileName}`);
                uploadResults.push({
                  fileName,
                  status: 'not_found'
                });
                continue;
              }

              try {
                const existing = await drive.files.list({
                  q: `name='${fileName}' and '${folderId}' in parents and trashed=false`,
                  fields: 'files(id, name)'
                });

                const fileMetadata = {
                  name: fileName,
                  parents: [folderId]
                };

                const media = {
                  mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                  body: fs.createReadStream(fileName)
                };

                let result;
                if (existing.data.files.length > 0) {
                  const fileId = existing.data.files[0].id;
                  console.log(`📝 Updating existing file: ${fileName}`);
                  result = await drive.files.update({
                    fileId,
                    media,
                    fields: 'id, name, modifiedTime'
                  });
                  console.log(`✅ Updated: ${fileName}`);
                } else {
                  console.log(`📄 Creating new file: ${fileName}`);
                  result = await drive.files.create({
                    resource: fileMetadata,
                    media,
                    fields: 'id, name, webViewLink'
                  });
                  console.log(`✅ Created: ${fileName}`);
                  console.log(`🔗 Link: ${result.data.webViewLink}`);
                }

                uploadResults.push({
                  fileName,
                  fileId: result.data.id,
                  status: 'success'
                });
              } catch (error) {
                console.error(`❌ Error uploading ${fileName}:`, error.message);
                uploadResults.push({
                  fileName,
                  status: 'error',
                  error: error.message
                });
              }
            }

            const timestamp = new Date().toISOString();
            const summary = {
              timestamp,
              convertedFiles,
              results: uploadResults,
              status: 'completed'
            };

            console.log('📊 Upload Summary:', JSON.stringify(summary, null, 2));

            const summaryMetadata = {
              name: `GDD_Sync_Report_${timestamp.split('T')[0]}.json`,
              parents: [folderId]
            };

            const summaryMedia = {
              mimeType: 'application/json',
              body: Buffer.from(JSON.stringify(summary, null, 2))
            };

            console.log('📄 Creating summary report in Google Drive...');
            await drive.files.create({
              resource: summaryMetadata,
              media: summaryMedia,
              fields: 'id, name, webViewLink'
            });
            console.log('✅ Summary report uploaded successfully!');
            console.log('🎉 All files successfully synced to Google Drive!');

          } catch (error) {
            console.error('💥 Fatal error in upload process:', error);
            process.exit(1);
          }
        }

        process.on('unhandledRejection', (reason, promise) => {
          console.error('Unhandled Rejection at:', promise, 'reason:', reason);
          process.exit(1);
        });

        uploadToGoogleDrive();
        EOF

    - name: Upload to Google Drive
      run: node upload-to-gdrive.js
      env:
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
