name: Convert MD to DOCX and Sync to Google Drive

on:
  push:
    branches: [ main, master ]
    paths: 
      - '**.md'
  workflow_dispatch:

jobs:
  convert-and-sync:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Pandoc
      run: |
        wget https://github.com/jgm/pandoc/releases/download/3.1.9/pandoc-3.1.9-1-amd64.deb
        sudo dpkg -i pandoc-3.1.9-1-amd64.deb

    - name: Install Lexend font
      run: |
        # Create system font directory
        sudo mkdir -p /usr/share/fonts/truetype/lexend
        
        # Download and install fonts with proper permissions
        sudo curl -L "https://github.com/googlefonts/lexend/raw/main/fonts/ttf/Lexend-Regular.ttf" -o /usr/share/fonts/truetype/lexend/Lexend-Regular.ttf
        sudo curl -L "https://github.com/googlefonts/lexend/raw/main/fonts/ttf/Lexend-Medium.ttf" -o /usr/share/fonts/truetype/lexend/Lexend-Medium.ttf
        sudo curl -L "https://github.com/googlefonts/lexend/raw/main/fonts/ttf/Lexend-Bold.ttf" -o /usr/share/fonts/truetype/lexend/Lexend-Bold.ttf
        
        # Set proper permissions
        sudo chmod 644 /usr/share/fonts/truetype/lexend/*.ttf
        
        # Rebuild font cache with sudo
        sudo fc-cache -f -v
        
        # List installed fonts to verify
        fc-list | grep -i lexend || true  # Continue even if grep finds nothing
        
    - name: Install dependencies
      run: |
        cat > package.json << 'EOF'
        {
          "name": "city-defense-z-gdd",
          "version": "1.0.0",
          "description": "Game Design Document automation for City Defense Z",
          "main": "upload-to-gdrive.js",
          "dependencies": {
            "googleapis": "^128.0.0"
          }
        }
        EOF
        npm install
        
    - name: Setup Pandoc template
      run: |
        # Create a custom template with Lexend font
        pandoc -o custom-reference.docx --print-default-data-file reference.docx
        
        # Create a temporary Word document with Lexend font settings
        cat > font-settings.md << 'EOF'
        ---
        mainfont: Lexend
        ---

        # Sample Title
        ## Sample Heading 2
        ### Sample Heading 3
        #### Sample Heading 4

        Sample text in Lexend font.
        EOF
        
        # Convert to DOCX with Lexend font
        pandoc font-settings.md \
          -o gdd-template-with-lexend.docx \
          --reference-doc=custom-reference.docx \
          -V mainfont=Lexend
        
        # Use this as the reference doc if user template doesn't exist
        if [ ! -f "gdd-template.docx" ]; then
          cp gdd-template-with-lexend.docx gdd-template.docx
        fi
        
    - name: Convert Markdown to DOCX
      run: |
        # Create a temporary reference.docx with Lexend font
        pandoc --print-default-data-file reference.docx > default-reference.docx
        
        # Create custom reference doc with Lexend font
        cat > style-template.yaml << 'EOF'
        font-family: Lexend
        reference-doc: default-reference.docx
        EOF
        
        # Convert main GDD files using template if it exists
        if [ -f "gdd-template.docx" ]; then
          echo "Converting with template..."
          if [ -f "City_Defense_Z_Complete_GDD.md" ]; then
            pandoc "City_Defense_Z_Complete_GDD.md" \
              --from markdown \
              --to docx \
              --output "City_Defense_Z_Complete_GDD.docx" \
              --reference-doc="gdd-template.docx" \
              --defaults=style-template.yaml \
              --toc \
              --toc-depth=3 \
              --shift-heading-level-by=0 \
              --wrap=none \
              --markdown-headings=atx
          fi
          
          if [ -f "City_Defense_Z_Complete_GDD_Skeleton.md" ]; then
            pandoc "City_Defense_Z_Complete_GDD_Skeleton.md" \
              --from markdown \
              --to docx \
              --output "City_Defense_Z_Complete_GDD_Skeleton.docx" \
              --reference-doc="gdd-template.docx" \
              --defaults=style-template.yaml \
              --toc \
              --toc-depth=3 \
              --shift-heading-level-by=0 \
              --wrap=none \
              --markdown-headings=atx
          fi
          
          # Convert any other .md files in root directory
          for file in *.md; do
            if [ -f "$file" ] && [ "$file" != "README.md" ] && [ "$file" != "setup-gdrive.md" ] && [ "$file" != "gdd-template-guide.md" ] && [ "$file" != "template-content.md" ]; then
              filename=$(basename "$file" .md)
              pandoc "$file" \
                --from markdown \
                --to docx \
                --output "${filename}.docx" \
                --reference-doc="gdd-template.docx" \
                --defaults=style-template.yaml \
                --toc \
                --toc-depth=3 \
                --shift-heading-level-by=0 \
                --wrap=none \
                --markdown-headings=atx
            fi
          done
        else
          echo "No template found, converting without template..."
          if [ -f "City_Defense_Z_Complete_GDD.md" ]; then
            pandoc "City_Defense_Z_Complete_GDD.md" \
              --from markdown \
              --to docx \
              --output "City_Defense_Z_Complete_GDD.docx" \
              --toc \
              --toc-depth=3
          fi
          
          if [ -f "City_Defense_Z_Complete_GDD_Skeleton.md" ]; then
            pandoc "City_Defense_Z_Complete_GDD_Skeleton.md" \
              --from markdown \
              --to docx \
              --output "City_Defense_Z_Complete_GDD_Skeleton.docx" \
              --toc \
              --toc-depth=3
          fi
        fi
        
    - name: Create upload script
      run: |
        cat > upload-to-gdrive.js << 'EOF'
        const { google } = require('googleapis');
        const fs = require('fs');
        const path = require('path');

        async function uploadToGoogleDrive() {
          try {
            // Parse service account credentials
            const serviceAccount = JSON.parse(process.env.GOOGLE_SERVICE_ACCOUNT);
            
            // Create JWT client
            const jwtClient = new google.auth.JWT(
              serviceAccount.client_email,
              null,
              serviceAccount.private_key,
              ['https://www.googleapis.com/auth/drive']
            );
            
            // Authorize
            await jwtClient.authorize();
            
            // Create drive API instance
            const drive = google.drive({ version: 'v3', auth: jwtClient });
            
            // List of files to upload
            const filesToUpload = [
              'City_Defense_Z_Complete_GDD.docx',
              'City_Defense_Z_Complete_GDD_Skeleton.docx'
            ];
            
            // Add any other generated DOCX files
            const allFiles = fs.readdirSync('.');
            allFiles.forEach(file => {
              if (file.endsWith('.docx') && !filesToUpload.includes(file)) {
                filesToUpload.push(file);
              }
            });
            
            const uploadResults = [];
            
            for (const fileName of filesToUpload) {
              if (fs.existsSync(fileName)) {
                console.log(`Uploading ${fileName}...`);
                
                // Check if file already exists in Drive
                const existingFiles = await drive.files.list({
                  q: `name='${fileName}' and parents in '${process.env.GOOGLE_DRIVE_FOLDER_ID}'`,
                  fields: 'files(id, name)'
                });
                
                const fileMetadata = {
                  name: fileName,
                  parents: [process.env.GOOGLE_DRIVE_FOLDER_ID]
                };
                
                const media = {
                  mimeType: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                  body: fs.createReadStream(fileName)
                };
                
                let result;
                if (existingFiles.data.files.length > 0) {
                  // Update existing file
                  result = await drive.files.update({
                    fileId: existingFiles.data.files[0].id,
                    media: media
                  });
                  console.log(`Updated ${fileName} with ID: ${result.data.id}`);
                } else {
                  // Create new file
                  result = await drive.files.create({
                    resource: fileMetadata,
                    media: media,
                    fields: 'id'
                  });
                  console.log(`Uploaded ${fileName} with ID: ${result.data.id}`);
                }
                
                uploadResults.push({
                  fileName: fileName,
                  fileId: result.data.id,
                  status: 'success'
                });
              } else {
                console.log(`File ${fileName} not found, skipping...`);
                uploadResults.push({
                  fileName: fileName,
                  status: 'not_found'
                });
              }
            }
            
            // Create sync report
            const syncReport = {
              timestamp: new Date().toISOString(),
              results: uploadResults,
              totalFiles: uploadResults.length,
              successfulUploads: uploadResults.filter(r => r.status === 'success').length
            };
            
            console.log('Sync Report:', JSON.stringify(syncReport, null, 2));
            
            // Upload sync report to Drive
            const reportMetadata = {
              name: `sync-report-${new Date().toISOString().split('T')[0]}.json`,
              parents: [process.env.GOOGLE_DRIVE_FOLDER_ID]
            };
            
            const reportMedia = {
              mimeType: 'application/json',
              body: JSON.stringify(syncReport, null, 2)
            };
            
            await drive.files.create({
              resource: reportMetadata,
              media: reportMedia,
              fields: 'id'
            });
            
            console.log('✅ All files synced successfully to Google Drive!');
            
          } catch (error) {
            console.error('❌ Error uploading to Google Drive:', error.message);
            process.exit(1);
          }
        }

        uploadToGoogleDrive();
        EOF
        
    - name: Upload to Google Drive
      env:
        GOOGLE_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
        GOOGLE_DRIVE_FOLDER_ID: ${{ secrets.GOOGLE_DRIVE_FOLDER_ID }}
      run: node upload-to-gdrive.js 